{"version":3,"sources":["util.js","components/Player.js","components/Songs.js","data.js","components/LibrarySong.js","components/Library.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["playAudio","isPlaying","audioRef","playPromise","current","play","undefined","then","audio","Player","currentSong","setIsPlaying","setSongInfo","songInfo","songs","setCurrentSong","setSongs","useEffect","newSongs","map","song","id","active","getTime","time","Math","floor","slice","skipTrackhandler","direction","currentIndex","findIndex","length","className","currentTime","min","onChange","e","target","value","max","duration","type","onClick","size","icon","faAngleLeft","console","log","pause","faPause","faPlay","faAngleRight","Songs","src","cover","alt","name","artist","chillHop","color","uuidv4","LibrarySong","key","songSelectHandler","a","Library","libraryStatus","Nav","setLibraryStatus","faMusic","App","useRef","useState","data","timeUpdateHandler","onLoadedMetadata","onTimeUpdate","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.219d982f.chunk.js","sourcesContent":["export const playAudio = (isPlaying, audioRef) =>{\r\n    if(isPlaying)\r\n    {\r\n        const playPromise = audioRef.current.play();\r\n        if(playPromise !== undefined){\r\n            playPromise.then((audio) =>{\r\n                audioRef.current.play();\r\n            });\r\n        }\r\n    }\r\n};\r\n","import React, {useEffect} from 'react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faPlay, faAngleLeft, faAngleRight, faPause,} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {playAudio}  from '../util'\r\n\r\n\r\n\r\nconst Player=({currentSong, isPlaying , setIsPlaying, audioRef, setSongInfo, songInfo, songs, setCurrentSong, setSongs})=> {\r\n\r\n  \r\n    useEffect(()=>{\r\n        const newSongs = songs.map((song)=>{\r\n            if(song.id === currentSong.id){\r\n                return{\r\n                    ...song,\r\n                    active: true,\r\n                }\r\n            }\r\n            else{\r\n                return{\r\n                    ...song,\r\n                    active:false,\r\n                };\r\n            }\r\n    });\r\n    setSongs(newSongs);\r\n},[currentSong]);\r\n\r\n\r\n\r\n\r\n    //---------------FUNCTIONS--------------//\r\n\r\n    //need function onClick when play pause skip and reverse\r\n    const playSongHandler = () =>{\r\n        console.log(audioRef);\r\n        //built in play,pause function for audio html elements\r\n        if(isPlaying)\r\n        {\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n        else{\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    };\r\n\r\n \r\n    //need function to display data on slider\r\n   const getTime= (time) => {\r\n    //formatting number in seconds   \r\n    return(\r\n           Math.floor(time/60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n       );\r\n   };\r\n\r\n\r\n   //function to handle drag of slider and song duration\r\n   const dragHandler = (e) =>{\r\n       audioRef.current.currentTime = e.target.value;\r\n       setSongInfo({...songInfo, currentTime: e.target.value})\r\n\r\n   }\r\n\r\n   //function to handle the skip front and back functionality\r\n   //direction parameter decided weather to go aback or forward\r\n   const skipTrackhandler = (direction)=>{\r\n        //we need information about the next song and the prev song while skipping as\r\n        //to which song to skip to\r\n        //get index of current song by comparing the id in the array\r\n        let currentIndex = songs.findIndex((songs)=> songs.id === currentSong.id);\r\n        if(direction === 'skip-front'){\r\n            setCurrentSong(songs[(currentIndex + 1)%songs.length])\r\n        }\r\n        if(direction === 'skip-back')\r\n        {\r\n            if((currentIndex-1)% songs.length ===-1){\r\n                setCurrentSong(songs[songs.length-1]);\r\n                playAudio(isPlaying,audioRef);\r\n                return;\r\n            }\r\n            setCurrentSong(songs[(currentIndex - 1)%songs.length])\r\n        }\r\n        playAudio(isPlaying,audioRef);\r\n   } \r\n\r\n\r\n\r\n   //--------RETURN--------------//\r\n\r\n    return (\r\n\r\n        <div className=\"player\">\r\n\r\n            <div className=\"time__control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n                    <input\r\n                    min={0}\r\n                    onChange={dragHandler}\r\n                    max={songInfo.duration || 0}\r\n                    value={songInfo.currentTime} \r\n                    type=\"range\"/>\r\n                <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\r\n            </div>\r\n\r\n\r\n            <div className=\"play__control\">\r\n            \r\n                <FontAwesomeIcon className=\"skip__back\" onClick={()=>skipTrackhandler('skip-back')} size=\"2x\" icon={faAngleLeft}/>\r\n\r\n                <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size=\"2x\" icon={isPlaying ? faPause : faPlay}/>\r\n           \r\n                <FontAwesomeIcon className=\"skip__front\" size=\"2x\" onClick={()=>skipTrackhandler('skip-front')} icon={faAngleRight}/>\r\n\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player\r\n","import React from 'react'\r\n\r\n\r\nconst Songs=({currentSong})=> {\r\n    return (\r\n        <div className=\"song__container\">\r\n            <img src={currentSong.cover} alt=\"songPhoto\"></img>\r\n            <h2>{currentSong.name}</h2>\r\n            <h1>{currentSong.artist}</h1>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Songs\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nfunction chillHop() {\r\n  return [\r\n    {\r\n      name: \"Beaver Creek\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n      artist: \"Aso, Middle School, Aviino\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\r\n      color: [\"#205950\", \"#2ab3bf\"],\r\n      id: uuidv4(),\r\n      active: true,\r\n    },\r\n    {\r\n      name: \"Daylight\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n      artist: \"Aiguille\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\r\n      color: [\"#EF8EA9\", \"#ab417f\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Keep Going\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n      artist: \"Swørn\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\r\n      color: [\"#CD607D\", \"#c94043\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Nightfall\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n      artist: \"Aiguille\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\r\n      color: [\"#EF8EA9\", \"#ab417f\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Reflection\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n      artist: \"Swørn\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\r\n      color: [\"#CD607D\", \"#c94043\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Under the City Stars\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n      artist: \"Aso, Middle School, Aviino\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\r\n      color: [\"#205950\", \"#2ab3bf\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    //ADD MORE HERE\r\n  ];\r\n}\r\n\r\nexport default chillHop;","import React from 'react'\r\nimport Songs from './Songs'\r\nimport {playAudio} from '../util'\r\n\r\nconst LibrarySong = ({song, setCurrentSong, songs, key , id, audioRef, isPlaying, setSongs}) => {\r\n\r\n    //function that handles the changing of songs when clicked in the library component\r\n    const songSelectHandler = async () =>{\r\n        await setCurrentSong(song);\r\n        //add active state to songs in the library\r\n        const newSongs = songs.map((song)=>{\r\n            if(song.id === id){\r\n                return{\r\n                    ...song,\r\n                    active: true,\r\n                }\r\n            }\r\n            else{\r\n                return{\r\n                    ...song,\r\n                    active:false,\r\n                }\r\n            }\r\n        });\r\n        setSongs(newSongs)\r\n        audioRef.current.play();\r\n        //check if is playing\r\n        playAudio(isPlaying,audioRef);\r\n       \r\n    };\r\n\r\n    return (\r\n        <div onClick={songSelectHandler} className={`library__song ${song.active ? 'selected' : \" \"}`}>\r\n\r\n            <img alt={song.name} src={song.cover}></img>\r\n            <div className=\"song__description\">\r\n                <h3>{song.name}</h3>\r\n                <h4>{song.artist}</h4>\r\n            </div>\r\n        \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LibrarySong;\r\n","import React from 'react'\r\nimport LibrarySong from './LibrarySong'\r\nimport Songs from './Songs'\r\n\r\n\r\nconst Library = ({songs, setCurrentSong, audioRef, isPlaying, setSongs, libraryStatus}) => {\r\n\r\n\r\n    return (\r\n        <div className={`library ${libraryStatus ? 'active-library' : \" \"}`}>\r\n            <h2>Library</h2>\r\n            {/* Library containing songs the user has*/}\r\n            <div className=\"library__songs\">\r\n\r\n                {songs.map(song=><LibrarySong\r\n                     audioRef={audioRef}\r\n                     songs={songs}\r\n                     setCurrentSong={setCurrentSong}\r\n                     song={song}\r\n                     id={song.id}\r\n                     key={songs.id}\r\n                     isPlaying={isPlaying}\r\n                     setSongs={setSongs}\r\n                     />)}\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Library\r\n","import React from 'react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faMusic} from '@fortawesome/free-solid-svg-icons';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\nconst Nav = ({libraryStatus, setLibraryStatus}) => {\r\n\r\n    const changeLibraryStatus = () => {\r\n        setLibraryStatus(!libraryStatus);\r\n        console.log(libraryStatus);\r\n    }\r\n\r\n\r\n    return (\r\n        <nav>\r\n        <h1>Lofi CodeHub</h1>\r\n        <button onClick={changeLibraryStatus}>\r\n            Library\r\n            <FontAwesomeIcon icon={faMusic}/>\r\n        </button>\r\n\r\n        </nav>\r\n    )};\r\n        \r\n\r\nexport default Nav;","import Player from \"./components/Player\";\nimport Songs from \"./components/Songs\";\nimport './styles/app.scss';\nimport data from \"./data\";\nimport {useState, useRef} from \"react\";\nimport Library from \"./components/Library\"\nimport Nav from \"./components/Nav\";\n\n\nfunction App() {\n  //need reference to the audio element\n  const audioRef = useRef(null);\n\n  //--------------STATES-----------------//\n\n  //song info state\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n\n  //State to store the songs, the data() is returned from util.js\n  //it returns the songs data from the file\n  const[songs,setSongs] = useState(data());\n\n  //need a state to store the current song\n  const [currentSong, setCurrentSong] = useState(songs[2]);\n\n  //need a state to handle is playing or pausing functionalities and changes\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const[libraryStatus, setLibraryStatus] = useState(false);\n\n  //------FUNCTION===========//\n\n  //function to handle time of song\n  //takes event from audio property of onTimeupdate\n  const timeUpdateHandler = (e) =>{\n    //variable to store the current time\n    const current = e.target.currentTime;\n    //the duration of the song\n    const duration = e.target.duration;\n\n    //set the state after play and pause\n    setSongInfo({...songInfo, currentTime: current, duration:duration});\n    console.log(songInfo.currentTime);\n  };\n\n\n  return (\n    <div className={`App ${libraryStatus ? \"library-active\" : \" \"}`}>\n    <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus}/>\n\n    <Songs currentSong={currentSong}/>\n\n    <Player \n      setSongInfo={setSongInfo}\n      songInfo={songInfo}\n      audioRef={audioRef}\n      setIsPlaying={setIsPlaying}\n      isPlaying={isPlaying}\n      currentSong={currentSong}\n      songs={songs}\n      setCurrentSong={setCurrentSong}\n      setSongs={setSongs}\n      />\n\n    <Library\n      audioRef={audioRef}\n      songs={songs}\n      setCurrentSong={setCurrentSong}\n      isPlaying={isPlaying}\n      setSongs={setSongs}\n      libraryStatus={libraryStatus}\n      />\n\n    <audio \n      onLoadedMetadata={timeUpdateHandler}\n      onTimeUpdate={timeUpdateHandler}\n      ref={audioRef}\n      src={currentSong.audio}>\n\n    </audio>\n\n  \n    \n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}